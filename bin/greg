#!/usr/bin/env ruby
puts "=" * 100
require "pp"

require "pathname"
require "erb"
require "fattr"

module Greg
  class DirTemplate
    attr_reader :destination
    attr_accessor :generator

    def initialize(destination)
      @destination = destination
    end

    def create!
      generator.inside_dir do
        new_dir = Pathname(destination).expand_path
        new_dir.mkdir unless new_dir.exist?
      end
    end

  end

  class FileTemplate
    attr_accessor :generator
    def create!
      generator.inside_dir do
        current_file = Pathname(destination).expand_path
        current_file.dirname.mkdir unless current_file.dirname.exist?
        current_file.write(contents)
      end
    end

    private

    def initialize(**attrs)
      attrs.each do |attr, value|
        send attr, value
      end
    end

    def self.attribute(attr)
      fattr attr
    end
    private_class_method :attribute

    def template(file)
      Pathname(generator.current_dir + file).expand_path.read
    end

    def erb(str)
      ERB.new(str).result(instance_eval { binding })
    end
  end

  class Gemfile < FileTemplate
    attr_reader :gems

    def initialize(*gems)
      @gems = gems
    end


    def destination
      "Gemfile"
    end

    def contents
      @contents = []
      @contents << 'source "https://rubygems.org"'
      @contents << nil

      @gems.each do |gem|
        if gem.is_a?(Hash)
          gem_name, gem_options = gem.first
          r = []
          r << "gem \"#{gem_name}\","
          gem_options.each do |key, value|
            r << "#{key.to_sym}: \"#{value.to_s}\""
          end
          @contents << r.join(" ")
        else
          @contents << "gem \"#{gem}\""
        end
      end

      @contents.join("\n")
    end
  end

  class Generator
    attr_reader :template_name
    attr_reader :output_dir
    attr_reader :current_dir
    attr_reader :force

    def initialize(template_name: , output_dir: ".", force: false)
      @template_name = template_name
      @output_dir = Pathname(output_dir).expand_path
      @current_dir = Pathname(".").expand_path

      @force = force
    end

    def run
      create_directory
      create_files
      self
    end

    def files
      []
    end


    def inside_dir(&block)
      Dir.chdir(output_dir, &block)
    end

    private

    def create_files
      files.each do |file|
        file.generator = self
        file.create!
      end
    end

    def create_directory
      if output_dir.exist?
        if force
          puts "#{output_dir} exists, removing it."
          output_dir.rmtree
        else
          raise "#{output_dir} already exists. If you want to overwrite it, use the 'force' option"
        end
      end

      output_dir.mkpath
    end
  end
end

puts "=" * 100
puts "*" * 100

class Gemfile < Greg::FileTemplate
  def destination
    "Gemfile"
  end

  def contents
    <<-EOF
    THE GEMFILE CONTENTS
    EOF
  end
end

class App < Greg::FileTemplate
  attribute :name

  def destination
    "app/#{name}.rb"
  end

  def contents
    erb(template("hola.rb"))
  end
end


class PepeGenerator < Greg::Generator
  def files
    [
     Greg::Gemfile.new(:a, :b, :c, d: {version: 5}),
     App.new(name: "TheFruit"),
     Greg::DirTemplate.new("public"),
    ]
  end
end
template_name = ARGV[0]

gen = PepeGenerator.new( template_name: template_name,
                        output_dir: "/tmp/#{template_name}/",
                        force: true).run


def sh(command)
  puts nil, "=== #{command} ==="
  puts `#{command}`
  puts "=" * (8+command.size)

end

p gen.template_name
p gen.output_dir
gen.inside_dir do
  sh "ls -la"
  sh "ls -la app/"
  sh "ls -la public/"
  sh "cat app/TheFruit.rb"
  sh "cat Gemfile"
end

puts "*" * 100

p Greg::Gemfile.new(:a).gems
