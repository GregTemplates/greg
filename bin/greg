#!/usr/bin/env ruby
$:.unshift(File.expand_path("../../lib", __FILE__))

require "colin"

options = Colin::Parser.new(ARGV).named_options([:name, :template_name]).options

if options[:h] || options[:help]
  usage = <<-EOF
Usage:
  greg <project-name> <template-name> [options]

Options:
  --force                    Force creation of project directory (if it already exists, it will be overwriten).
  --output-directory         Select where the new project will be located (current directory by default).
  --templates-dir            Select the source location for templates (~/.greg_templates by default)

Installing a template
  greg --install=<template-name> [--path=<template-path>]
  greg -i <template-name> [--path=<template-path>]
  EOF

  puts usage
  exit(0)
end

if options[:i] || options[:install]
  require "greg/template_installer"
  installer = Greg::TemplateInstaller.new(options).install
  exit(0)
end

begin
  require "greg"

  templates_dir = options.delete(:templates_dir)
  Greg.templates_dir = templates_dir if templates_dir

  gen = Greg.generator(**options).run

  def sh(command)
    puts nil, "=== #{command} ==="
    puts `#{command}`
    puts "=" * (8+command.size)
  end

  # gen.inside_dir do
  #   sh "ls -la"
  #   sh "ls -la app/"
  #   sh "ls -la public/"
  #   sh "cat app/TheFruit.rb"
  #   sh "cat Gemfile"
  # end

rescue Greg::UnexistingTemplateError => e
  error = <<-EOF
Error:
  "#{e.template}" template doesn't exist.
  EOF
  puts error

  exit(1)
rescue Greg::ExistingProjectError => e
  error = <<-EOF
Error:
  "#{e.dir}" already exists.
  If you want to overwrite it, use the '--force' option.
  EOF
  puts error

  exit(1)
end
