#!/usr/bin/env ruby
$:.unshift(File.expand_path("../../lib", __FILE__))

require "colin"

options = Colin::Parser.new(ARGV).named_options([:name]).options

if options[:h] || options[:help]
  usage = <<-EOF
Usage:
  greg <project-name> [options]

Options:
  --template                 Template to use
  --force                    Force creation of project directory (if it already exists, it will be overwriten).
  --output-directory         Select where the new project will be located (current directory by default).
  --templates-dir            Select the source location for templates (~/.greg_templates by default)

Installing a template
  greg --install=<template-name> [--path=<template-path>]
  greg -i <template-name> [--path=<template-path>]

Listing templates
  greg --list
  EOF
  puts usage
  exit(0)
end

require "greg"

if options[:list]
  require "json"

  installed_templates = `ls #{Greg.templates_dir}`.split("\n")
  remote_templates = begin
                       JSON.parse(`curl https://api.github.com/orgs/GregTemplates/repos`).map {|i|i["name"]}
                     rescue
                       []
                     end


  available_templates = remote_templates - ["greg", *installed_templates]

  puts available_templates
  msg = []
  msg << "Installed templates:"
  msg << installed_templates.map { |l| "  * #{l}" }
  msg << ""
  if available_templates.any?
    msg << "Available templates:"
    msg << available_templates.map { |l| "  * #{l}" }
  end
  puts msg.join("\n")

  exit(0)
end

if options[:i] || options[:install]
  i = options.delete(:install)
  i ||= options.delete(:i)
  options[:template] ||= i
  require "greg/template_installer"
  installer = Greg::TemplateInstaller.new(**options).install

  exit(0)
end

begin

  templates_dir = options.delete(:templates_dir)
  Greg.templates_dir = templates_dir if templates_dir

  options[:template_name] = options.delete(:template)

  gen = Greg.generator(**options).run

  def sh(command)
    puts nil, "=== #{command} ==="
    puts `#{command}`
    puts "=" * (8+command.size)
  end

  # gen.inside_dir do
  # sh "ls -la"
  #   sh "ls -la app/"
  #   sh "ls -la public/"
  #   sh "cat app/TheFruit.rb"
  #   sh "cat Gemfile"
  # end

rescue Greg::UnexistingTemplateError => e
  error = <<-EOF
Error:
  "#{e.template}" template doesn't exist.
  EOF
  puts error

  exit(1)
rescue Greg::ExistingProjectError => e
  error = <<-EOF
Error:
  "#{e.dir}" already exists.
  If you want to overwrite it, use the '--force' option.
  EOF
  puts error

  exit(1)
end
